name: Sync Translations with CloudFlare
description: Sync Crowdin translations of desired environment with cloudflare

inputs:
  CROWDIN_BRANCH_NAME:
    description: "Running on production, test or staging etc"
    default: "crowdin"
    requried: false
  CROWDIN_PROJECT_ID:
    description: "Crowdin project ID which can be found in the crowdin project settings"
    required: true
  CROWDIN_PERSONAL_TOKEN:
    description: "Crowdin personal token which can be found in the crowdin account settings"
    required: true
  R2_ACCOUNT_ID:
    description: "R2 account ID from the Cloudflare R2 dashboard"
    required: true
  R2_ACCESS_KEY_ID:
    description: "R2 access key ID from the Cloudflare R2 dashboard"
    required: true
  R2_SECRET_ACCESS_KEY:
    description: "R2 secret access key from the Cloudflare R2 dashboard"
    required: true
  R2_BUCKET_NAME:
    description: "R2 bucket name from the Cloudflare R2 dashboard"
    required: true

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install crc-32

    - name: Run script
      run: node -e `
        const getRegexPattern = () =>
          /(i18n_default_text={?|localize\()\s*(['"])\s*(.*?)(?<!\\)\2\s*/gs;

        const getStringsFromInput = (input, i18n_marker = getRegexPattern()) => {
          const messages = [];

          let continue_loop = true;
          while (continue_loop) {
            const result = i18n_marker.exec(input);
            if (result == null) continue_loop = false;
            else {
              const extracted = result[3];
              // Replace escape characters.
              messages.push(extracted.replace(/\\/g, ""));
            }
          }

          return messages;
        };

        const getTranslatableFiles = () => {
          const globs = ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"];
          const file_paths = [];

          for (let j = 0; j < globs.length; j++) {
            let files_found = glob.sync(process.env.GITHUB_WORKSPACE + "/src/" + globs[j]);
            files_found = files_found.filter(
              (file_path) => file_path.indexOf("__tests__") === -1
            );
            file_paths.push(...files_found);
          }

          return file_paths;
        };


        const getKeyHash = (string) => crc32(string);

        /** *********************************************
        * Common
        */
        const getKeyHash = (string) => crc32(string);

        /** **********************************************
        * Compile
        */
        (async () => {
          try {
            const file_paths = getTranslatableFiles();
            const messages = [];
            const messages_json = {};

            // Iterate over files and extract all strings from the i18n marker
            for (let i = 0; i < file_paths.length; i++) {
              console.log(file_paths[i]);

              try {
                const file = fs.readFileSync(file_paths[i], "utf8");
                messages.push(...getStringsFromInput(file));
              } catch (e) {
                console.log(e);
              }
            }

            // Hash the messages and set the key-value pair for json
            for (let i = 0; i < messages.length; i++) {
              messages_json[getKeyHash(messages[i])] = messages[i];
            }

            // Add to messages.json
            fs.writeFileSync(
              process.env.GITHUB_WORKSPACE + "/crowdin/messages.json",
              JSON.stringify(messages_json),
              "utf8",
              (err) => console.log(err)
            );
          } catch (e) {
            console.error(e);
          }
        })();
      `

    - name: Crowdin pull action to download translations
      uses: crowdin/github-action@v1
      with:
        upload_sources: false
        upload_translations: false
        download_translations: true
        create_pull_request: false
        push_translations: false
        crowdin_branch_name: ${{ inputs.CROWDIN_BRANCH_NAME }}
      env:
        CROWDIN_PROJECT_ID: ${{ inputs.CROWDIN_PROJECT_ID }}
        CROWDIN_PERSONAL_TOKEN: ${{ inputs.CROWDIN_PERSONAL_TOKEN }}

    - name: R2 Upload Action to upload translations to Cloudflare
      uses: ryand56/r2-upload-action@latest
      with:
        r2-account-id: ${{ inputs.R2_ACCOUNT_ID }}
        r2-access-key-id: ${{ inputs.R2_ACCESS_KEY_ID }}
        r2-secret-access-key: ${{ inputs.R2_SECRET_ACCESS_KEY }}
        r2-bucket: ${{ inputs.R2_BUCKET_NAME }}
        source-dir: ./translations
        destination-dir: ./${{ inputs.CROWDIN_BRANCH_NAME }}/translations
